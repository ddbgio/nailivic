// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const session = `-- name: Session :one
SELECT user_id, token
FROM sessions
WHERE id = $1
AND expires_on > NOW()
`

type SessionRow struct {
	UserID int32  `json:"user_id"`
	Token  string `json:"token"`
}

func (q *Queries) Session(ctx context.Context, id int32) (SessionRow, error) {
	row := q.db.QueryRow(ctx, session, id)
	var i SessionRow
	err := row.Scan(&i.UserID, &i.Token)
	return i, err
}

const sessionAdd = `-- name: SessionAdd :exec
INSERT INTO sessions (user_id, token, created_on, expires_on)
VALUES ($1, $2, $3, $4)
`

type SessionAddParams struct {
	UserID    int32            `json:"user_id"`
	Token     string           `json:"token"`
	CreatedOn pgtype.Timestamp `json:"created_on"`
	ExpiresOn pgtype.Timestamp `json:"expires_on"`
}

func (q *Queries) SessionAdd(ctx context.Context, arg SessionAddParams) error {
	_, err := q.db.Exec(ctx, sessionAdd,
		arg.UserID,
		arg.Token,
		arg.CreatedOn,
		arg.ExpiresOn,
	)
	return err
}

const userAdd = `-- name: UserAdd :exec
INSERT INTO users (username, hashed_password, created_on, last_login)
VALUES ($1, $2, $3, $4)
`

type UserAddParams struct {
	Username       string           `json:"username"`
	HashedPassword string           `json:"hashed_password"`
	CreatedOn      pgtype.Timestamp `json:"created_on"`
	LastLogin      pgtype.Timestamp `json:"last_login"`
}

func (q *Queries) UserAdd(ctx context.Context, arg UserAddParams) error {
	_, err := q.db.Exec(ctx, userAdd,
		arg.Username,
		arg.HashedPassword,
		arg.CreatedOn,
		arg.LastLogin,
	)
	return err
}

const userByID = `-- name: UserByID :one
SELECT id, username, hashed_password, created_on, last_login FROM users WHERE id = $1
`

func (q *Queries) UserByID(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRow(ctx, userByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.HashedPassword,
		&i.CreatedOn,
		&i.LastLogin,
	)
	return i, err
}

const userByUsername = `-- name: UserByUsername :one
SELECT id, username, hashed_password, created_on, last_login FROM users WHERE username = $1
`

func (q *Queries) UserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRow(ctx, userByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.HashedPassword,
		&i.CreatedOn,
		&i.LastLogin,
	)
	return i, err
}
